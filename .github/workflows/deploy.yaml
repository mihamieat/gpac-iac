name: "Deploy stack"
on:
  push:

env:
  TF_CLOUD_ORGANIZATION: "${{ secrets.TF_CLOUD_ORGANIZATION }}"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "${{ secrets.TF_WORKSPACE }}"
  TF_WORKSPACE_KEY: "${{ secrets.TF_WORKSPACE_KEY }}"
  CONFIG_DIRECTORY: "./terraform"

jobs:
  terraform:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    outputs:
      database_ip: ${{ steps.save-ouputs.outputs.database_ip}}
      database_private_ip: ${{ steps.save-ouputs.outputs.database_private_ip}}
      backend_ip: ${{ steps.save-ouputs.outputs.backend_ip}}
      frontend_public_ips: ${{ steps.tf-outputs.outputs.frontend_public_ips}}

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

      - name: Outputs Database IP via API
        id: tf-outputs
        run: |
          RESPONSE=$(curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/workspaces/$TF_WORKSPACE_KEY/current-state-version-outputs")

          DATABASE_IP=$(echo "$RESPONSE" | jq -r '.data[] | select(.attributes.name=="database_ip") | .attributes.value')
          echo "database_ip=${DATABASE_IP}" >> $GITHUB_OUTPUT

          DATABASE_PRIVATE_IP=$(echo "$RESPONSE" | jq -r '.data[] | select(.attributes.name=="database_private_ip") | .attributes.value')
          echo "database_private_ip=${DATABASE_PRIVATE_IP}" >> $GITHUB_OUTPUT

          FRONTEND_IPS=$(echo "$RESPONSE" | jq -r '.data[] | select(.attributes.name=="frontend_public_ips") | .attributes.value | join(",")')
          echo "frontend_public_ips=${FRONTEND_IPS}" >> $GITHUB_OUTPUT

          BACKEND_IP=$(echo "$RESPONSE" | jq -r '.data[] | select(.attributes.name=="backend_ip") | .attributes.value')
          echo "backend_ip=${BACKEND_IP}" >> $GITHUB_OUTPUT

      - name: Save Outputs
        id: save-ouputs
        run: |
          echo "DATABASE_IP=${{ steps.tf-outputs.outputs.database_ip }}" >> $GITHUB_OUTPUT
          echo "DATABASE_PRIVATE_IP=${{ steps.tf-outputs.outputs.database_private_ip }}" >> $GITHUB_OUTPUT
          echo "BACKEND_IP=${{ steps.tf-outputs.outputs.backend_ip }}" >> $GITHUB_OUTPUT
          echo "FRONTEND_IPS=${{ steps.tf-outputs.outputs.frontend_public_ips }}" >> $GITHUB_OUTPUT

  ansible:
    name: "Ansible Provisioning"
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Ansible
        run: sudo apt update && sudo apt install -y ansible

      - name: Configure SSH
        env:
          DATABASE_IP: ${{ needs.terraform.outputs.database_ip }}
          FRONTEND_IPS: ${{ needs.terraform.outputs.frontend_public_ips }}
          BACKEND_IP: ${{ needs.terraform.outputs.backend_ip }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.DATABASE_IP }} >> ~/.ssh/known_hosts
          for ip in $(echo ${{ env.FRONTEND_IPS }} | tr ',' ' ' | tr -d '"'); do
            ssh-keyscan -H $ip >> ~/.ssh/known_hosts
          done
          ssh-keyscan -H ${{ env.BACKEND_IP }} >> ~/.ssh/known_hosts
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa

      - name: Generate inventory file
        env:
          DATABASE_IP: ${{ needs.terraform.outputs.database_ip }}
          FRONTEND_IPS: ${{ needs.terraform.outputs.frontend_public_ips }}
          BACKEND_IP: ${{ needs.terraform.outputs.backend_ip }}
        run: |
          echo "[frontend]" > inventory.ini
          for ip in ${FRONTEND_IPS//,/ }; do
            echo "$ip ansible_user=ubuntu" >> inventory.ini
          done
          echo "[backend]" >> inventory.ini
          echo "${{ env.BACKEND_IP }} ansible_user=ubuntu" >> inventory.ini
          echo "[mongodb]" >> inventory.ini
          echo "${{ env.DATABASE_IP }} ansible_user=ubuntu" >> inventory.ini

      - name: Configure EC2 targets
        uses: dawidd6/action-ansible-playbook@v3
        env:
          DATABASE_IP: ${{ needs.terraform.outputs.database_ip }}
          FRONTEND_IPS: ${{ needs.terraform.outputs.frontend_public_ips }}
          BACKEND_IP: ${{ needs.terraform.outputs.backend_ip }}
        with:
          playbook: playbooks/configure-servers.yaml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory inventory.ini

      - name: Run Install Mongo DB Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v3
        env:
          DATABASE_IP: ${{ needs.terraform.outputs.database_ip }}
        with:
          playbook: playbooks/deploy-db-server.yaml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory inventory.ini
            --extra-vars db_root_user=${{ secrets.DB_ROOT_USERNAME }}
            --extra-vars db_root_pass=${{ secrets.DB_ROOT_PASSWORD }}
            --extra-vars db_ui_user=${{ secrets.DB_UI_AUTH_USERNAME }}
            --extra-vars db_ui_pass=${{ secrets.DB_UI_AUTH_PASSWORD }}
            --extra-vars database_client=${{ secrets.DATABASE_CLIENT }}
            --extra-vars api_username=${{ secrets.API_USER }}
            --extra-vars api_password=${{ secrets.API_PASSWORD }}

      - name: Run Deploy Backend Playbook
        uses: dawidd6/action-ansible-playbook@v3
        env:
          DATABASE_PRIVATE_IP: ${{ needs.terraform.outputs.database_private_ip }}
        with:
          playbook: playbooks/deploy-backend-server.yaml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory inventory.ini
            --extra-vars database_connection_string="mongodb://${{ secrets.DB_ROOT_USERNAME}}:${{ secrets.DB_ROOT_PASSWORD }}@${{ env.DATABASE_PRIVATE_IP }}"
            --extra-vars database_client=${{ secrets.DATABASE_CLIENT }}

      - name: Run Deploy Frontend Playbook
        uses: dawidd6/action-ansible-playbook@v3
        with:
          playbook: playbooks/deploy-frontend-server.yaml
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          options: |
            --inventory inventory.ini
            --extra-vars api_url=${{ secrets.API_URL }}
            --extra-vars api_username=${{ secrets.API_USER }}
            --extra-vars api_password=${{ secrets.API_PASSWORD }}
